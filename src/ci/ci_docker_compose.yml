version: "3.5"


services:

    ci-db:
      image: postgres:12-alpine
      container_name: ci-db
      hostname: ci-db
      restart: always
      environment:
        - POSTGRES_DB=${DRONE_POSTGRESQL_DATABASE}
        - POSTGRES_USER=${DRONE_POSTGRESQL_USER}
        - POSTGRES_PASSWORD=${DRONE_POSTGRESQL_PASSWORD}
      ports:
        - ${DRONE_POSTGRESQL_PORT}:5432
      networks:
        - ci-network
      volumes:
        - ci-db-data:/var/lib/postgresql/data

    ci:
      image: drone/drone
      container_name: ci
      hostname: ci
      restart: always
      environment:
        - DRONE_USER_CREATE=${DRONE_USER_CREATE}
        - DRONE_GIT_USERNAME=${DRONE_GIT_USERNAME}
        - DRONE_GIT_PASSWORD=${DRONE_GIT_PASSWORD}
        - DRONE_GIT_ALWAYS_AUTH=true
        - DRONE_GOGS_SERVER=${DRONE_GOGS_SERVER}
        - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
        - DRONE_SERVER_PROTO=https
        - DRONE_TLS_AUTOCERT=false
        - DRONE_RUNNER_NETWORKS=ci-network
        - DRONE_DATABASE_DRIVER=postgres
        - DRONE_DATABASE_DATASOURCE=postgres://${DRONE_POSTGRESQL_USER}:${DRONE_POSTGRESQL_PASSWORD}@ci-db:5432/${DRONE_POSTGRESQL_DATABASE}?sslmode=disable
        - DRONE_AGENTS_ENABLED=true
        - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      ports:
        - ${DRONE_HTTP_PORT}:80
      networks:
        - ci-network
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ci-data:/data
      depends_on:
        - ci-db

    ci-secret:
      image: drone/vault
      container_name: ci-secret
      hostname: ci-secret
      restart: always
      environment:
        - DRONE_SECRET=${DRONE_SECRET}
        - VAULT_ADDR=${VAULT_ADDR}
        - VAULT_TOKEN=${VAULT_TOKEN}
        - VAULT_TOKEN_RENEWAL=${VAULT_TOKEN_RENEWAL}
        - VAULT_TOKEN_TTL=${VAULT_TOKEN_TTL}
        - DRONE_DEBUG=true
      networks:
        - ci-network
      ports:
        - ${DRONE_VAULT_PLUGIN_PORT}:3000
      depends_on:
        - ci

    ci-agent:
      image: drone/agent
      container_name: ci-agent
      hostname: ci-agent
      restart: always
      environment:
        - DRONE_RPC_SERVER=http://ci:80
        - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
        - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
        - DRONE_SECRET_ENDPOINT=http://ci-secret:3000
        - DRONE_SECRET_SECRET=${DRONE_SECRET}
      networks:
        - ci-network
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      depends_on:
        - ci
        - ci-secret


networks:
    ci-network:
      name: ci-network
      driver: bridge


volumes:

    ci-data:
      driver_opts:
        type: none
        device: ${DRONE_DATA}
        o: bind

    ci-db-data:
      driver_opts:
        type: none
        device: ${DRONE_POSTGRESQL_DATA}
        o: bind